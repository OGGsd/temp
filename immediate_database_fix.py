#!/usr/bin/env python3
"""
Immediate Database Fix for AxieStudio
Fixes the current AutogenerateDiffsDetected error
"""

import asyncio
import sys
from pathlib import Path

# Add the backend path to sys.path
backend_path = Path(__file__).parent / "src" / "backend" / "base"
sys.path.insert(0, str(backend_path))

from axiestudio.services.deps import get_db_service
from sqlalchemy import text


async def fix_immediate_issues():
    """Fix the immediate database issues causing startup failure."""
    
    print("üîß Immediate Database Fix for AxieStudio")
    print("=" * 50)
    print("Fixing AutogenerateDiffsDetected errors...")
    print()
    
    try:
        db_service = get_db_service()
        print(f"üìä Database URL: {db_service.database_url}")
        
        async with db_service.with_session() as session:
            fixes_applied = []
            
            # Fix 1: Make verification_attempts NOT NULL
            print("üîß Fix 1: Making verification_attempts column NOT NULL...")
            try:
                # First, update any NULL values to 0
                result = await session.exec(text(
                    "UPDATE \"user\" SET verification_attempts = 0 WHERE verification_attempts IS NULL"
                ))
                print(f"   ‚úÖ Updated NULL values in verification_attempts")
                
                # Then make the column NOT NULL
                await session.exec(text(
                    "ALTER TABLE \"user\" ALTER COLUMN verification_attempts SET NOT NULL"
                ))
                print(f"   ‚úÖ Made verification_attempts NOT NULL")
                fixes_applied.append("verification_attempts made NOT NULL")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Warning with verification_attempts fix: {e}")
            
            # Fix 2: Remove problematic indexes
            print("\nüîß Fix 2: Removing problematic indexes...")
            
            indexes_to_remove = [
                "ix_user_email_verification_token",
                "ix_user_verification_code"
            ]
            
            for index_name in indexes_to_remove:
                try:
                    await session.exec(text(f"DROP INDEX IF EXISTS {index_name}"))
                    print(f"   ‚úÖ Removed index: {index_name}")
                    fixes_applied.append(f"Removed index: {index_name}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Warning removing {index_name}: {e}")
            
            # Commit all changes
            await session.commit()
            print(f"\n‚úÖ Applied {len(fixes_applied)} fixes successfully!")
            
            # Verification
            print("\nüîç Verifying fixes...")
            
            # Check verification_attempts column
            result = await session.exec(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns
                WHERE table_name = 'user' AND column_name = 'verification_attempts'
            """))
            
            row = result.fetchone()
            if row:
                print(f"   ‚úÖ verification_attempts: {row[1]}, nullable: {row[2]}")
            
            # Check indexes
            result = await session.exec(text("""
                SELECT indexname 
                FROM pg_indexes 
                WHERE tablename = 'user' 
                AND indexname IN ('ix_user_email_verification_token', 'ix_user_verification_code')
            """))
            
            remaining_indexes = result.fetchall()
            if not remaining_indexes:
                print("   ‚úÖ Problematic indexes successfully removed")
            else:
                print(f"   ‚ö†Ô∏è Some indexes still exist: {remaining_indexes}")
            
            print("\nüéâ Database fix completed!")
            print("You can now try starting AxieStudio again.")
            
            return True
            
    except Exception as e:
        print(f"\n‚ùå Database fix failed: {e}")
        print("Please check your database connection and try again.")
        return False


async def main():
    """Main function."""
    success = await fix_immediate_issues()
    return 0 if success else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
