#!/usr/bin/env python3
"""
Test Database Fix
Verifies that the enhanced security columns fix resolves the startup issue
"""

import asyncio
import sys
from pathlib import Path

# Add the backend path to sys.path
backend_path = Path(__file__).parent / "src" / "backend" / "base"
sys.path.insert(0, str(backend_path))

async def test_database_fix():
    """Test if the database fix resolves the startup issue."""
    
    print("🔧 Testing Database Fix for Enhanced Security Columns")
    print("=" * 60)
    
    try:
        from axiestudio.services.deps import get_db_service
        from sqlalchemy import text, inspect
        
        print("✅ Database service imported successfully")
        
        # Get database service
        db_service = get_db_service()
        print(f"📊 Database URL: {db_service.database_url}")
        
        # Test the enhanced security columns addition
        async with db_service.with_session() as session:
            async with session.bind.connect() as conn:
                
                # Test the _add_enhanced_security_columns method
                print("🔧 Testing enhanced security columns addition...")
                
                try:
                    # Call the method directly
                    db_service._add_enhanced_security_columns(conn)
                    print("✅ Enhanced security columns method executed successfully")
                except Exception as e:
                    print(f"❌ Enhanced security columns method failed: {e}")
                    return False
                
                # Verify columns exist
                inspector = inspect(conn)
                if "user" in inspector.get_table_names():
                    existing_columns = [col['name'] for col in inspector.get_columns('user')]
                    
                    required_columns = [
                        "login_attempts",
                        "locked_until", 
                        "last_login_ip",
                        "password_changed_at",
                        "failed_login_attempts",
                        "last_failed_login"
                    ]
                    
                    print(f"\n📋 User table columns: {len(existing_columns)} total")
                    print("🔐 Enhanced Security Columns Status:")
                    
                    all_exist = True
                    for column in required_columns:
                        if column in existing_columns:
                            print(f"  ✅ {column}: EXISTS")
                        else:
                            print(f"  ❌ {column}: MISSING")
                            all_exist = False
                    
                    if all_exist:
                        print("\n🎉 All enhanced security columns exist!")
                        print("✅ Database migration issue should be resolved!")
                        return True
                    else:
                        print("\n⚠️ Some enhanced security columns are missing!")
                        return False
                else:
                    print("❌ User table doesn't exist")
                    return False
                
    except Exception as e:
        print(f"❌ Database fix test failed: {e}")
        return False


async def test_database_initialization():
    """Test the full database initialization process."""
    
    print("\n🚀 Testing Full Database Initialization")
    print("-" * 50)
    
    try:
        from axiestudio.services.database.utils import initialize_database
        
        print("🔧 Running database initialization...")
        
        # This should now work without AutogenerateDiffsDetected errors
        await initialize_database(fix_migration=False)
        
        print("✅ Database initialization completed successfully!")
        print("🎉 No AutogenerateDiffsDetected errors!")
        
        return True
        
    except Exception as e:
        print(f"❌ Database initialization failed: {e}")
        if "AutogenerateDiffsDetected" in str(e):
            print("🚨 Still getting AutogenerateDiffsDetected - fix didn't work!")
        return False


async def main():
    """Main test function."""
    
    print("🧪 DATABASE FIX TEST")
    print("=" * 60)
    print("This test verifies that the enhanced security columns fix")
    print("resolves the AutogenerateDiffsDetected startup issue.")
    print()
    
    # Step 1: Test enhanced security columns addition
    fix_success = await test_database_fix()
    
    if not fix_success:
        print("\n❌ Database fix test failed!")
        return 1
    
    # Step 2: Test full database initialization
    init_success = await test_database_initialization()
    
    if not init_success:
        print("\n❌ Database initialization test failed!")
        return 1
    
    print("\n" + "=" * 60)
    print("🎉 DATABASE FIX TEST PASSED!")
    print("=" * 60)
    print("✅ Enhanced security columns are properly configured")
    print("✅ No AutogenerateDiffsDetected errors")
    print("✅ Database initialization works correctly")
    print("✅ The app should now start successfully!")
    print("\n🚀 AxieStudio startup issue is RESOLVED!")
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
