#!/usr/bin/env python3
"""
Manual Verification Script
Checks all components without running the full application
"""

import sys
from pathlib import Path

def check_file_exists(file_path: str, description: str) -> bool:
    """Check if a file exists and report result."""
    path = Path(file_path)
    if path.exists():
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - NOT FOUND")
        return False

def check_content_in_file(file_path: str, content_patterns: list, description: str) -> bool:
    """Check if specific content exists in a file."""
    path = Path(file_path)
    if not path.exists():
        print(f"‚ùå {description}: File {file_path} does not exist")
        return False
    
    try:
        with open(path, 'r', encoding='utf-8') as f:
            file_content = f.read()
        
        missing_patterns = []
        for pattern in content_patterns:
            if pattern not in file_content:
                missing_patterns.append(pattern)
        
        if not missing_patterns:
            print(f"‚úÖ {description}: All required content found")
            return True
        else:
            print(f"‚ùå {description}: Missing patterns: {missing_patterns}")
            return False
            
    except Exception as e:
        print(f"‚ùå {description}: Error reading file: {e}")
        return False

def main():
    """Run manual verification of all components."""
    print("üîç MANUAL COMPREHENSIVE VERIFICATION")
    print("=" * 60)
    
    results = []
    
    # 1. Check Backend Files
    print("\nüìÅ BACKEND FILES VERIFICATION")
    print("-" * 40)
    
    backend_files = [
        ("src/backend/base/axiestudio/services/database/models/user/model.py", "User Model"),
        ("src/backend/base/axiestudio/api/v1/email_verification.py", "Email Verification API"),
        ("src/backend/base/axiestudio/services/auth/verification_code.py", "Verification Code Service"),
        ("src/backend/base/axiestudio/services/email/service.py", "Email Service"),
        ("src/backend/base/axiestudio/services/database/auto_migration_manager.py", "Auto Migration Manager"),
        ("src/backend/base/axiestudio/alembic/versions/def789ghi012_add_email_verification_fields.py", "Migration File"),
    ]
    
    backend_results = []
    for file_path, description in backend_files:
        result = check_file_exists(file_path, description)
        backend_results.append(result)
    
    results.extend(backend_results)
    
    # 2. Check Frontend Files
    print("\nüé® FRONTEND FILES VERIFICATION")
    print("-" * 40)
    
    frontend_files = [
        ("src/frontend/src/pages/SignUpPage/index.tsx", "SignUp Page"),
        ("src/frontend/src/pages/EmailVerificationPage/index.tsx", "Email Verification Page"),
        ("src/frontend/src/pages/LoginPage/index.tsx", "Login Page"),
    ]
    
    frontend_results = []
    for file_path, description in frontend_files:
        result = check_file_exists(file_path, description)
        frontend_results.append(result)
    
    results.extend(frontend_results)
    
    # 3. Check User Model Fields
    print("\nüë§ USER MODEL FIELDS VERIFICATION")
    print("-" * 40)
    
    user_model_patterns = [
        "email_verified: bool = Field(default=False)",
        "email_verification_token: str | None",
        "email_verification_expires: datetime | None",
        "verification_code: str | None",
        "verification_code_expires: datetime | None",
        "verification_attempts: int = Field(default=0)",
    ]
    
    user_model_result = check_content_in_file(
        "src/backend/base/axiestudio/services/database/models/user/model.py",
        user_model_patterns,
        "User Model Email Verification Fields"
    )
    results.append(user_model_result)
    
    # 4. Check API Endpoints
    print("\nüåê API ENDPOINTS VERIFICATION")
    print("-" * 40)
    
    api_patterns = [
        '@router.post("/verify-code")',
        '@router.post("/resend-code")',
        "class VerifyCodeRequest",
        "class ResendCodeRequest",
    ]
    
    api_result = check_content_in_file(
        "src/backend/base/axiestudio/api/v1/email_verification.py",
        api_patterns,
        "Email Verification API Endpoints"
    )
    results.append(api_result)
    
    # 5. Check SignUp Page Structure
    print("\nüìÑ SIGNUP PAGE STRUCTURE VERIFICATION")
    print("-" * 40)
    
    signup_patterns = [
        "Sign up for Axie Studio",
        "Username <span",
        "Email <span",
        "Password <span",
        "Confirm your password",
        "Account not activated?",
        "verify-code",
        "mutateAddUser",
    ]
    
    signup_result = check_content_in_file(
        "src/frontend/src/pages/SignUpPage/index.tsx",
        signup_patterns,
        "SignUp Page Structure"
    )
    results.append(signup_result)
    
    # 6. Check Email Verification Page
    print("\nüìß EMAIL VERIFICATION PAGE VERIFICATION")
    print("-" * 40)
    
    verification_patterns = [
        "Enter Verification Code",
        "6-digit",
        "verify-code",
        "resend-code",
        "/api/v1/email/verify-code",
        "/api/v1/email/resend-code",
    ]
    
    verification_result = check_content_in_file(
        "src/frontend/src/pages/EmailVerificationPage/index.tsx",
        verification_patterns,
        "Email Verification Page Structure"
    )
    results.append(verification_result)
    
    # 7. Check Router Registration
    print("\nüõ£Ô∏è ROUTER REGISTRATION VERIFICATION")
    print("-" * 40)
    
    router_patterns = [
        "email_verification_router",
        "router_v1.include_router(email_verification_router)",
    ]
    
    router_result = check_content_in_file(
        "src/backend/base/axiestudio/api/router.py",
        router_patterns,
        "Email Verification Router Registration"
    )
    results.append(router_result)
    
    # 8. Check Database Migration
    print("\nüóÑÔ∏è DATABASE MIGRATION VERIFICATION")
    print("-" * 40)
    
    migration_patterns = [
        "verification_code",
        "verification_code_expires",
        "verification_attempts",
        "email_verified",
        "def upgrade()",
        "def downgrade()",
    ]
    
    migration_result = check_content_in_file(
        "src/backend/base/axiestudio/alembic/versions/def789ghi012_add_email_verification_fields.py",
        migration_patterns,
        "Database Migration File"
    )
    results.append(migration_result)
    
    # 9. Check Database Service Integration
    print("\nüîß DATABASE SERVICE INTEGRATION VERIFICATION")
    print("-" * 40)
    
    db_service_patterns = [
        '"verification_code"',
        '"verification_code_expires"',
        '"verification_attempts"',
        "_add_enhanced_security_columns",
    ]
    
    db_service_result = check_content_in_file(
        "src/backend/base/axiestudio/services/database/service.py",
        db_service_patterns,
        "Database Service Integration"
    )
    results.append(db_service_result)
    
    # 10. Summary
    print("\n" + "=" * 60)
    print("üéØ VERIFICATION SUMMARY")
    print("=" * 60)
    
    total_checks = len(results)
    passed_checks = sum(results)
    failed_checks = total_checks - passed_checks
    
    print(f"Total Checks: {total_checks}")
    print(f"‚úÖ Passed: {passed_checks}")
    print(f"‚ùå Failed: {failed_checks}")
    print(f"Success Rate: {(passed_checks/total_checks)*100:.1f}%")
    
    if failed_checks == 0:
        print("\nüéâ ALL VERIFICATION CHECKS PASSED!")
        print("‚úÖ Email verification system is fully implemented")
        print("‚úÖ Database migration system is properly configured")
        print("‚úÖ Frontend components are correctly structured")
        print("‚úÖ API endpoints are properly registered")
        print("‚úÖ System is ready for production deployment")
        return True
    else:
        print(f"\n‚ùå {failed_checks} VERIFICATION CHECKS FAILED")
        print("‚ùå System needs attention before deployment")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
